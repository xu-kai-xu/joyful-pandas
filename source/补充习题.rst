****************
补充习题
****************

.. ipython:: python
    
    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt

.. admonition:: 注意
   :class: caution

    在补充习题中不得使用任何for循环。

Ex1：NumPy的向量化运算
=================================

- 给定一个正整数列表，请找出缺失的最小正整数。

.. code-block:: python

    >>> arr = np.array([2,3,4])
    >>> get_miss(arr)
    1
    >>> arr = np.array([6,3,5,1,2])
    >>> get_miss(arr)
    4
    >>> arr = np.array([5,2,1,3,4])
    >>> get_miss(arr)
    6

- 设计一个生成二维NumPy数组的函数get_res()，其输入为正整数n，返回的数组构造方式如下：第1行填入1个1，第2行在上一行填入位置的下一列连续填入2个2，第3行在第二行最后一个填入位置的下一列连续填入3个3，...，第n行在第n-1行最后一个填入位置的下一列连续填入n个n。

.. code-block:: python

    >>> n = 4
    >>> get_res(n)

.. code-block:: python

    array([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
           [0., 2., 2., 0., 0., 0., 0., 0., 0., 0.],
           [0., 0., 0., 3., 3., 3., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0., 0., 4., 4., 4., 4.]])

- 点 :math:`A` 初始位置在数轴原点处，现进行n步简单随机游走，即每一步以等概率向左或向右移动长度为1的距离，记该点最终的位置为 :math:`S_n` ，则可以证明

.. math::

    \lim_{n\rightarrow+\infty}\frac{\mathbb{E}|S_n|}{\sqrt{n}}=\sqrt{\frac{2}{\pi}}

现取n为5000进行1000次试验，且每次试验中用 :math:`\frac{1}{100}\sum_{k=1}^{100}|S_n|` 来代替 :math:`\mathbb{E}|S_n|` 。此时可以计算得到1000个 :math:`\lim_{n\rightarrow+\infty}\frac{\mathbb{E}|S_n|}{\sqrt{n}}-\sqrt{\frac{2}{\pi}}` 的估计值，请计算这些估计值的均值、0.05分位数和0.95分位数。

- 在二维平面上有n个点，每个点具有k维特征，点的坐标数据记录在node_xy中，点的特征数据记录在node_fea中。现要计算所有点的相关矩阵 :math:`S` ，点a和点b的相关系数定义如下

.. math::

    S_{ab} = \frac{\sigma_{ab}}{2} + \frac{\lambda_{ab}}{2}

其中，若记点a特征为 :math:`A` ，点b特征为 :math:`B` ，则有

.. math::

    \sigma_{ab} = \frac{\sum_{i=1}^kA_iB_i}{\sqrt{\sum_{i=1}^kA^2_i}\sqrt{\sum_{i=1}^kB^2_i}}

对于点a而言，将所有点到点a的二维平面距离进行排序，从而得到每个点到点a的距离排名，距离最近（排名为1）的点是点a自身，记点b的排名为 :math:`r^{(a)}_b` ，则定义

.. math::

    \lambda_{ab} = 1 - \frac{2\times (r^{(a)}_b-1)}{n-1}

请对于给定的node_xy和node_fea计算相关矩阵 :math:`S` 。（提示：使用np.argsort()）

.. code-block:: python

    >>> n, k = 1000, 10
    >>> node_xy = np.random.rand(n, 2)
    >>> node_fea = np.random.rand(n, k)
    >>> get_S(node_xy, node_fea)

Ex2：统计学生的成绩情况
==================================================

在data/supplement/ex2目录下存放了某校高三第一学期的学生成绩情况，包含16次周测成绩、期中考试成绩和期末考试成绩，科目一栏的成绩表示学生选课的成绩。所有的表中，相同的行表示的是同一位同学。请完成以下练习：

.. ipython:: python

    df = pd.read_csv('data/supplement/ex2/第1次周测成绩.csv')
    df.head()

- 该校高三年级中是否存在姓名相同的学生？
- 在第一次周测中，请求出每个班级选修物理或化学同学的语数英总分的平均值。哪个班级最高？
- 学生在该学期的总评计算方式是各次考试总分的加权平均值，其中周测成绩权重为50%（每次测验权重相等，即3.125%），期中权重为20%，期末权重为30%。请结合nlargest函数找出年级中总评前十的同学。
- 请统计1班到8班文理科（物化生为理科，政史地为文科）期末考试总分前5的学生，结果格式如下，括号内的为选科分数：

.. ipython:: python

    pd.DataFrame(
        {
            "1班（文）": ["王大锤：历史（102）"]+["..."]* 4,
            "1班（理）": ["..."]* 5,
            "2班（文）": ["..."]* 5,
            "...": ["..."]* 5,
            "8班（理）": ["..."]* 5,
        }
    ) # 王大锤：历史（102）只是举个例子，表示结果字符串需要按照这个格式来写

- 学生成绩的稳定性可以用每次考试在全年级相同选科学生中的总分排名标准差来度量，请计算每个班级的各科学生成绩稳定性的均值，结果格式如下：

.. ipython:: python

    pd.DataFrame(
        np.random.rand(11, 6),
        index=pd.Index(range(1, 12), name="班级"),
        columns=pd.Index(
            ["物理", "化学", "生物", "历史", "地理", "政治"],
            name="选科",
        )
    )

Ex3：统计商品的审核情况
==================================================

在data/supplement/ex3中存放了两个有关商品审核的信息表，“商品信息.csv”中记录了每个商品的ID号，唯一的识别码以及商品所属的类别，“申请与审核记录.csv”中记录了每个商品的审核信息。已知商品的审核流程如下：由申请人发起商品审核的申请，然后由审核人审核，审核的结果包括通过与不通过两种情况，若商品不通过审核则可以由另一位申请人再次发起申请，直到商品的审核通过。

.. ipython:: python

    df_info = pd.read_csv('data/supplement/ex3/商品信息.csv')
    df_info.head()

    df_record = pd.read_csv('data/supplement/ex3/申请与审核记录.csv')
    df_record.head()

- 有多少商品最终通过审核？
- 各类别商品的通过率分别为多少？
- 对于类别为“T1”且最终状态为通过的商品，平均审核次数为多少？
- 是否存在商品在上一次审核未完成时就提交了下一次审核申请？
- 请对所有审核通过的商品统计第一位申请人和最后一位审核人的信息，返回格式如下：

.. ipython:: python

    pd.DataFrame(
        {
            "ID号": ["ID 000001"]+["..."]*3,
            "类别":["T1"]+["..."]*3,
            "申请人":["\#+3((52\{"]+["..."]*3,
            "审核人":["3`}04}%@75"]+["..."]*3
        },
        index=[1,2,3,"..."]
    )

.. admonition:: 提示
   :class: hint

    groupby对象上也定义了head和tail方法。

Ex4：删除同样的行
==================================================

现有两张表，请在df1中剔除在df2中出现过的行。

.. ipython:: python

    df1 = pd.DataFrame({
        "A": [3,2,2,3,1,3],
        "B": [2,1,1,3,6,2],
        "C": [1,2,2,7,7,1],
        "D": [5,6,6,1,2,5],
    })
    df1
    df2 = pd.DataFrame({
        "A": [2,3,1],
        "B": [1,9,6],
        "C": [2,7,7],
        "D": [6,1,2],
    })
    df2

结果应当如下：

.. ipython:: python

    pd.DataFrame({
        "A": [3,3,3],
        "B": [2,3,2],
        "C": [1,7,1],
        "D": [5,1,5],
    })
